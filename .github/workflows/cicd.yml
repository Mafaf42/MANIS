name: Laravel CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  tests:
    name: âœ… Laravel Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker images (no cache)
        run: docker compose -f docker-compose.yml build --no-cache

      - name: Start Docker Compose
        run: docker compose -f docker-compose.yml up -d

      - name: Wait for MySQL to be ready
        run: docker compose exec app bash -c "until mysqladmin ping -h db --silent; do sleep 1; done"

      - name: Prepare environment
        run: docker compose exec app bash -c "cp .env.testing .env && php artisan key:generate --env=testing"

      - name: Run migrations
        run: docker compose exec app php artisan migrate --force --env=testing

      - name: Run tests with coverage
        run: docker compose exec app php artisan test --env=testing --coverage-clover=storage/coverage.xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: storage/coverage.xml

  phpstan:
    name: ðŸ§  Static Analysis (PHPStan)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run PHPStan
        run: vendor/bin/phpstan analyse

  pint:
    name: ðŸŽ¨ Code Style (Pint)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run Pint
        run: vendor/bin/pint

  sonarcloud:
    name: ðŸ”Ž SonarCloud Scan
    runs-on: ubuntu-latest
    needs: [tests, phpstan, pint]

    steps:
      - uses: actions/checkout@v4

      - name: Install PHP dependencies
        run: composer install --prefer-dist --no-progress

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}
            -Dsonar.php.coverage.reportPaths=storage/coverage.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker:
    name: ðŸ“¦ Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [tests, phpstan, pint, sonarcloud]

    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image (no cache)
        run: docker build --no-cache -t ghcr.io/${{ github.repository_owner }}/manis:latest .

      - name: Push Docker image
        run: docker push ghcr.io/${{ github.repository_owner }}/manis:latest

  deploy:
    name: ðŸš€ Deploy to EC2
    runs-on: ubuntu-latest
    needs: docker

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /home/ubuntu/manis

            # Log in to GHCR
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GHCR_PAT }}

            # Pull the latest image
            docker pull ghcr.io/${{ github.repository_owner }}/manis:latest

            # Restart containers
            docker-compose -f docker-compose-prod.yml down || true
            docker-compose -f docker-compose-prod.yml up -d

            # Post-deploy Laravel commands
            docker exec laravel-app php artisan migrate --force
            docker exec laravel-app php artisan view:clear
            docker exec laravel-app php artisan config:cache
            docker exec laravel-app php artisan route:cache
